// version
// imports
// errors
// interfaces, libraries, contracts

// Type declarations
// State variables
// Events
// Modifiers
// Functions

// constructor
// receive function (if exists)
// fallback function (if exists)
// external
// public
// internal
// private
// internal & private view & pure functions
// external & public view & pure functions

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {VRFConsumerBaseV2Plus} from "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import {VRFV2PlusClient} from "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";
import {AutomationCompatible} from "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol";

/**
 * @title Raffle
 * @author d4db0d
 * @notice This contract is for creating a simple raffle
 * @dev Implements Chainlink VRFv2.5 (VRFConsumerBaseV2Plus) and Chainlink Automation (AutomationCompatible)
 */
contract Raffle is VRFConsumerBaseV2Plus, AutomationCompatible {
    /* Errors */
    error Raffle__SendMoreToEnterRaffle();
    error Raffle__RaffleNotOver(); // todo not done by patrick yet
    error Raffle__TransferFailed();
    error Raffle__RaffleNotOpen();
    error Raffle__UpkeepNotNeeded(uint256 balance, uint256 playersLength, uint256 raffleState);

    /* Type declarations */
    enum RaffleState {
        OPEN,
        CALCULATING
    }

    /* State variables */
    // Constants
    bool private constant IS_NATIVE_PAYMENT = false;
    uint16 private constant REQUEST_CONFIRMATIONS = 3;
    uint32 private constant NUM_WORDS = 1;

    // Immutables
    uint256 private immutable i_entranceFee;
    uint256 private immutable i_interval;
    uint256 private immutable i_subscriptionId;
    uint32 private immutable i_callbackGasLimit;
    bytes32 private immutable i_keyHash;

    // Regular state variables
    uint256 private s_lastTimeStamp;
    address payable private s_recentWinner;
    address payable[] private s_players;

    // Enum
    RaffleState private s_raffleState;

    /* Events */
    event RaffleEntered(address indexed player);
    event WinnerPicked(address indexed ss_recentWinner);
    event RequestedRaffleWinner(uint256 indexed requestId);

    /* Modifiers */

    /* Constructor */
    /**
     * @notice  Constructor for the Raffle contract
     * @dev     Sets the entrance fee and raffle interval on deployment
     * @param   entranceFee The fee to enter the raffle
     * @param   interval The time interval for the raffle
     * @param   vrfCoordinator The address of the Chainlink VRF Coordinator
     * @param   gasLane The key hash of the Chainlink VRF Coordinator
     * @param   subscriptionId The subscription ID of the Chainlink VRF Coordinator
     * @param   callbackGasLimit The gas limit for the callback function
     */
    constructor(
        uint256 entranceFee,
        uint256 interval,
        address vrfCoordinator,
        bytes32 gasLane,
        uint256 subscriptionId,
        uint32 callbackGasLimit
    ) VRFConsumerBaseV2Plus(vrfCoordinator) {
        i_entranceFee = entranceFee;
        i_interval = interval;
        s_lastTimeStamp = block.timestamp;
        i_keyHash = gasLane;
        i_subscriptionId = subscriptionId;
        i_callbackGasLimit = callbackGasLimit;
        s_raffleState = RaffleState.OPEN;
    }

    /**
     * @notice  Enter the current raffle round to win a prize
     * @dev     .
     */
    function enterRaffle() public payable {
        // require(msg.value >= i_entranceFee, "Not enough ETH sent to enter the raffle"); // Not gas-efficient as storing strings costs more gas

        if (msg.value < i_entranceFee) {
            revert Raffle__SendMoreToEnterRaffle();
        }
        // require(msg.value >= i_entranceFee, NotEnoughEthSent()); // solc ^0.8.26

        if (s_raffleState != RaffleState.OPEN) {
            revert Raffle__RaffleNotOpen();
        }

        s_players.push(payable(msg.sender));
        // Emit event
        // 1. Makes migration easier
        // 2. Makes front end "indexing" easier
        emit RaffleEntered(msg.sender);
    }

    /**
     * @notice  Chainlink VRF 2.5 fulfill function called after requesting random word via pickWinner(). Uses random number to select a winner, transfer the prize, and reset the raffle
     * @dev     This function is internally called by rawFulfillRandomWords() in VRFConsumerBaseV2Plus.sol
     *          Note: Unused parameter requestId  the ID of the request made to the Chainlink VRF Coordinator via pickWinner()
     * @param   randomWords  an array of random uint256 numbers generated by the Chainlink VRF Coordinator. In our case, only one random number is generated
     */
    function fulfillRandomWords(uint256, /* requestId */ uint256[] calldata randomWords) internal override {
        uint256 indexOfWinner = randomWords[0] % s_players.length;
        address payable winner = s_players[indexOfWinner];
        s_recentWinner = winner;

        // Prepare for new raffle round
        s_raffleState = RaffleState.OPEN;
        s_players = new address payable[](0); // set to new dynamic address payable array with length 0, thus no players
        s_lastTimeStamp = block.timestamp;

        (bool success,) = winner.call{value: address(this).balance}("");
        if (!success) {
            revert Raffle__TransferFailed();
        }
        emit WinnerPicked(s_recentWinner);
    }

    /**
     * Chainlink Automation functions
     */

    /**
     * @notice  Check if the upkeep is needed to perform the raffle calculation
     * @dev     The function is simulated by the Chainlink node to check if the upkeep is needed
     *          The upkeep is needed if:
     *          1. The time interval has passed
     *          2. The raffle state is OPEN
     *          3. There are players in the raffle
     *          4. The contract has balance to pay the winner
     *          Note: checkData parameter passed by the Chainlink node is not used
     * @return  upkeepNeeded  A boolean indicating if the upkeep is needed. Must be true if the upkeep is needed to kickoff the raffle calculation
     * @return  performData  Unused parameter passed to the performUpkeep function
     */
    function checkUpkeep(bytes memory /* checkData */ )
        public // as called by performUpkeep (internal) and the Chainlink Automation nodes (external)
        view
        override
        returns (
            // cannotExecute // leads to error: "OnlySimulatedBackend" as called by performUpkeep internally also by a real address not only simulated
            bool upkeepNeeded,
            bytes memory performData
        )
    {
        bool timePassed = block.timestamp - s_lastTimeStamp >= i_interval;
        bool raffleOpen = s_raffleState == RaffleState.OPEN;
        bool hasPlayers = s_players.length > 0;
        bool hasBalance = address(this).balance > 0;

        if (timePassed && raffleOpen && hasPlayers && hasBalance) {
            upkeepNeeded = true;
            performData = "0x0"; // "0x0" means empty bytes, also like ""

            return (upkeepNeeded, performData); // optional, a return function returns the values even without a return statement, but best practice to include
        } else {
            upkeepNeeded = false;
            performData = "0x0";
            return (upkeepNeeded, performData);
        }
    }

    /**
     * @notice  Perform the upkeep to kickoff the raffle calculation, equivalent to pickWinner()
     * @dev     The function is called by the Chainlink node to kickoff the raffle calculation
     *          The function changes the raffle state to CALCULATING and makes a VRF request to pick a winner
     *          Note: performData parameter passed by the Chainlink node is not used
     */
    function performUpkeep(bytes calldata /* performData */ ) external override {
        (bool upkeepNeeded,) = checkUpkeep("0x");
        if (!upkeepNeeded) {
            revert Raffle__UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));
        }

        s_raffleState = RaffleState.CALCULATING;

        // create new random numbers request to send to the Chainlink VRF Coordinator
        VRFV2PlusClient.RandomWordsRequest memory request = VRFV2PlusClient.RandomWordsRequest({
            keyHash: i_keyHash, // the gas lane key hash, tells the VRF Coordinator how much gas to use
            subId: i_subscriptionId, // subscription ID of Chainlink Subscription, associated with this contract
            requestConfirmations: REQUEST_CONFIRMATIONS, // 3-200 confirmations
            callbackGasLimit: i_callbackGasLimit, // gas limit for the callback function (fulfillRandomWords)
            numWords: NUM_WORDS, // number of random words to generate, in our case 1
            extraArgs: VRFV2PlusClient._argsToBytes(
                VRFV2PlusClient.ExtraArgsV1({
                    nativePayment: IS_NATIVE_PAYMENT // whether to use ETH (true) or LINK (false) for payment
                })
            )
        });

        uint256 requestId = s_vrfCoordinator.requestRandomWords(request);
        emit RequestedRaffleWinner(requestId); // redundant as RandomWordsRequested already emitted with many params
    }

    /**
     * GETTER FUNCTIONS
     */
    function getEntranceFee() external view returns (uint256) {
        return i_entranceFee;
    }

    function getRaffleState() external view returns (RaffleState) {
        return s_raffleState;
    }

    function getPlayers() external view returns (address payable[] memory) {
        return s_players;
    }

    function getPlayer(uint256 indexPlayer) external view returns (address payable) {
        return s_players[indexPlayer];
    }

    function getRecentWinner() external view returns (address) {
        return s_recentWinner;
    }
    function getLastTimeStamp() external view returns (uint256) {
        return s_lastTimeStamp;
    }
    function getInterval() external view returns (uint256) {
        return i_interval;
    }
    function getPlayersLength() external view returns (uint256) {
        return s_players.length;
    }
    function getSubscriptionId() external view returns (uint256) {
        return i_subscriptionId;
    }
    function getKeyHash() external view returns (bytes32) {
        return i_keyHash;
    }
    function getCallbackGasLimit() external view returns (uint32) {
        return i_callbackGasLimit;
    }
    function getVrfCoordinator() external view returns (address) {
        return address(s_vrfCoordinator);
    }
    
}
